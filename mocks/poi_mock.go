// Code generated by MockGen. DO NOT EDIT.
// Source: poi.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// CheckRepos mocks base method.
func (m *MockConnection) CheckRepos(repoNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRepos", repoNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRepos indicates an expected call of CheckRepos.
func (mr *MockConnectionMockRecorder) CheckRepos(repoNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRepos", reflect.TypeOf((*MockConnection)(nil).CheckRepos), repoNames)
}

// DeleteBranches mocks base method.
func (m *MockConnection) DeleteBranches(branchNames []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranches", branchNames)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranches indicates an expected call of DeleteBranches.
func (mr *MockConnectionMockRecorder) DeleteBranches(branchNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranches", reflect.TypeOf((*MockConnection)(nil).DeleteBranches), branchNames)
}

// GetBrancheNames mocks base method.
func (m *MockConnection) GetBrancheNames() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrancheNames")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrancheNames indicates an expected call of GetBrancheNames.
func (mr *MockConnectionMockRecorder) GetBrancheNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrancheNames", reflect.TypeOf((*MockConnection)(nil).GetBrancheNames))
}

// GetPullRequests mocks base method.
func (m *MockConnection) GetPullRequests(hostname string, repoNames []string, queryHashes string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequests", hostname, repoNames, queryHashes)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequests indicates an expected call of GetPullRequests.
func (mr *MockConnectionMockRecorder) GetPullRequests(hostname, repoNames, queryHashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequests", reflect.TypeOf((*MockConnection)(nil).GetPullRequests), hostname, repoNames, queryHashes)
}

// GetRepoNames mocks base method.
func (m *MockConnection) GetRepoNames() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoNames")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoNames indicates an expected call of GetRepoNames.
func (mr *MockConnectionMockRecorder) GetRepoNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoNames", reflect.TypeOf((*MockConnection)(nil).GetRepoNames))
}
