// Code generated by MockGen. DO NOT EDIT.
// Source: poi.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// CheckRepos mocks base method.
func (m *MockConnection) CheckRepos(hostname string, repoNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRepos", hostname, repoNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRepos indicates an expected call of CheckRepos.
func (mr *MockConnectionMockRecorder) CheckRepos(hostname, repoNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRepos", reflect.TypeOf((*MockConnection)(nil).CheckRepos), hostname, repoNames)
}

// CheckoutBranch mocks base method.
func (m *MockConnection) CheckoutBranch(branchName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutBranch", branchName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckoutBranch indicates an expected call of CheckoutBranch.
func (mr *MockConnectionMockRecorder) CheckoutBranch(branchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutBranch", reflect.TypeOf((*MockConnection)(nil).CheckoutBranch), branchName)
}

// DeleteBranches mocks base method.
func (m *MockConnection) DeleteBranches(branchNames []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranches", branchNames)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranches indicates an expected call of DeleteBranches.
func (mr *MockConnectionMockRecorder) DeleteBranches(branchNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranches", reflect.TypeOf((*MockConnection)(nil).DeleteBranches), branchNames)
}

// GetAssociatedRefNames mocks base method.
func (m *MockConnection) GetAssociatedRefNames(oid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssociatedRefNames", oid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssociatedRefNames indicates an expected call of GetAssociatedRefNames.
func (mr *MockConnectionMockRecorder) GetAssociatedRefNames(oid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssociatedRefNames", reflect.TypeOf((*MockConnection)(nil).GetAssociatedRefNames), oid)
}

// GetBranchNames mocks base method.
func (m *MockConnection) GetBranchNames() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchNames")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchNames indicates an expected call of GetBranchNames.
func (mr *MockConnectionMockRecorder) GetBranchNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchNames", reflect.TypeOf((*MockConnection)(nil).GetBranchNames))
}

// GetLog mocks base method.
func (m *MockConnection) GetLog(branchName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLog", branchName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLog indicates an expected call of GetLog.
func (mr *MockConnectionMockRecorder) GetLog(branchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockConnection)(nil).GetLog), branchName)
}

// GetPullRequests mocks base method.
func (m *MockConnection) GetPullRequests(hostname string, repoNames []string, queryHashes string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequests", hostname, repoNames, queryHashes)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequests indicates an expected call of GetPullRequests.
func (mr *MockConnectionMockRecorder) GetPullRequests(hostname, repoNames, queryHashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequests", reflect.TypeOf((*MockConnection)(nil).GetPullRequests), hostname, repoNames, queryHashes)
}

// GetRemoteNames mocks base method.
func (m *MockConnection) GetRemoteNames() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteNames")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteNames indicates an expected call of GetRemoteNames.
func (mr *MockConnectionMockRecorder) GetRemoteNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteNames", reflect.TypeOf((*MockConnection)(nil).GetRemoteNames))
}

// GetRepoNames mocks base method.
func (m *MockConnection) GetRepoNames(repoName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoNames", repoName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoNames indicates an expected call of GetRepoNames.
func (mr *MockConnectionMockRecorder) GetRepoNames(repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoNames", reflect.TypeOf((*MockConnection)(nil).GetRepoNames), repoName)
}

// GetUncommittedChanges mocks base method.
func (m *MockConnection) GetUncommittedChanges() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncommittedChanges")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncommittedChanges indicates an expected call of GetUncommittedChanges.
func (mr *MockConnectionMockRecorder) GetUncommittedChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncommittedChanges", reflect.TypeOf((*MockConnection)(nil).GetUncommittedChanges))
}
